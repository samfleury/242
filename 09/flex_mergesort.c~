#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ARRAY_MAX 30000

/* ASK: call by value, "revert to their original values", p. 58 */

static void array_print(int *a, int n){
    int i;

    for (i = 0; i < n; i++){
        printf("%d\n", a[i]);
    }
}

void merge(int *a, int *w, int n){
    int i = 0; /* index for first half of array */
    int j = n / 2; /* index for second half of array */
    int k = 0; /* index for workspace */

    while (i < n / 2 && j < n){
        if (a[i] < a[j]){
            w[k++] = a[i++];
        } else{
            w[k++] = a[j++];
        }
    }
    while (i < n / 2){
        w[k++] = a[i++];
    }
    while (j < n){
        w[k++] = a[j++];
    }
}

void merge_sort(int *a, int *w, int n){
    int i = 0;
    /* take care of stopping condition */
    if (n < 2){
        return;
    }

    merge_sort(a, w, n / 2);
    merge_sort((a + (n / 2)), (w + (n / 2)), (n - (n / 2)));

    merge(a, w, n);
    
    for (i = 0; i < n; i++){
        a[i] = w[i];
    }
}


int main(void){
    int capacity = 2;
    int itemcount = 0;
    int item;
    int *my_array = malloc(capacity * sizeof my_array[0]);
    int *workspace = malloc(capacity * sizeof my_array[0]);

    if (NULL == my_array){
        fprintf(stderr, "mem alloc failed.\n");
        exit(EXIT_FAILURE);
    }
    
    while (1 == scanf("%d", &item)){
        if (itemcount == capacity){
            capacity += capacity;
            my_array = realloc(my_array, capacity * sizeof my_array[0]);
            if (NULL == my_array){
                fprintf(stderr, "mem alloc failed.\n");
                exit(EXIT_FAILURE);
            }
            workspace = realloc(workspace, capacity * sizeof workspace[0]);
            if (NULL == workspace){
                fprintf(stderr, "mem alloc failed.\n");
                exit(EXIT_FAILURE);
            }
        }
        my_array[itemcount++] = item;
    }

    merge_sort(my_array, workspace, count);

    for (i = 0; i < count; i++){
        printf("%d\n", my_array[i]);
    }
    fprintf(stderr, "%d %f\n", count, (end - start) / (double)CLOCKS_PER_SEC);
    return EXIT_SUCCESS;
}
